name: Create Release

on:
  workflow_call:
    inputs:
      release_type:
        description: 'Type of release (major, minor, patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to get all tags

      - name: Get latest tag
        id: latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Calculate new tag
        id: new_tag
        run: |
          latest_tag="${{ steps.latest_tag.outputs.latest_tag }}"
          major=$(echo "$latest_tag" | grep -oE '[0-9]+(?=\.)')
          minor=$(echo "$latest_tag" | grep -oE '(?<=[0-9]\.)[0-9]+(?=\.)')
          patch=$(echo "$latest_tag" | grep -oE '[0-9]+$')

          if [[ "${{ github.event.inputs.release_type }}" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "${{ github.event.inputs.release_type }}" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_tag="v$major.$minor.$patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Create tag
        run: |
          git tag ${{ steps.new_tag.outputs.new_tag }}
          git push origin ${{ steps.new_tag.outputs.new_tag }}

      - name: Generate release notes
        uses: actions/github-script@v7
        id: release_notes
        env:
          NEW_TAG: ${{ steps.new_tag.outputs.new_tag }}
          PREVIOUS_TAG: ${{ steps.latest_tag.outputs.latest_tag }}
        with:
          script: |
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const previousTag = process.env.PREVIOUS_TAG;
            const newTag = process.env.NEW_TAG;

            try {

              const { data: compare } = await octokit.rest.repos.compareCommits({
                owner,
                repo,
                base: previousTag,
                head: newTag,
              });

              let releaseNotes = `## Changes since ${previousTag}\n\n`;

              if (compare.commits && compare.commits.length > 0) {
                compare.commits.forEach(commit => {
                  releaseNotes += `- ${commit.commit.message}\n`;
                });
              } else {
                releaseNotes += "No changes detected.\n";
              }

              return releaseNotes;
            } catch (error) {
              console.error("Error generating release notes:", error);
              return "Error generating release notes. Please check the logs.";
            }

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new_tag.outputs.new_tag }}
          release_name: Release ${{ steps.new_tag.outputs.new_tag }}
          body: ${{ steps.release_notes.outputs.result }}
          draft: false
          prerelease: false